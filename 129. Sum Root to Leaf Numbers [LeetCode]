/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//This is also one method.

//     bool solve(TreeNode* root, int &sum, int &n){
//         if(root == NULL)
//             return 1;
        
//         n = n*10 + root->val;
        
//         bool l = solve(root->left,sum,n);
//         bool r = solve(root->right,sum,n);
        
//         if(l && r)
//             sum += n;
        
//         n /= 10;
//         return 0;
//     }
      
    void solve(TreeNode* root, int &sum, int n){
        if(root == NULL)
            return;
        
        n += root->val;
        if(!root->left && !root->right)
            sum += n;
        
        if(n <= INT_MAX/10) solve(root->left,sum,n*10);
        if(n <= INT_MAX/10) solve(root->right,sum,n*10);
    }
    
    int sumNumbers(TreeNode* root) {
        int sum = 0;
        int n = 0;
        solve(root,sum,n);
        return sum;
    }
};
